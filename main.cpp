#include "stdafx.h"
#include <iostream>
#include "Windows.h"
#include <winternl.h>
#include "md5.h"

// todo: explore custom debugger cc
// aleas en fonction de l'heure et input
// lire et stocker l'input de facon imprévisible avec des push par ex
// utiliser ror ou rol
// xor .... xor
// mettre des nop partout
// essayer call recursif sur main
// run multiple thread
// casser la machine si debug ou wrong input

// if doit etre plus chelou que le else

// Luc : debug + if
// Ben : wrong input + else

using namespace std;

char* md5_hash(char* input){
	MD5 md5;
	return md5.digestString(input);
}

__declspec(noinline) PPEB f(){
	if (IsDebuggerPresent()){ cout << "Debugged 1" << endl; }
	BOOL res;
	CheckRemoteDebuggerPresent(GetCurrentProcess(), &res);
	if (res){ cout << "Debugged 2" << endl; }
	PPEB ppeb;
	__asm{
		mov eax, fs:[0x30]
		mov ppeb, eax
	}
	return ppeb;
}

int _tmain(int argc, _TCHAR* argv[])
{
	// start timestamp:
	int start_time_secondes;
	int start_time_decimales;
	__asm{
		rdtsc
		mov start_time_secondes, edx
		mov start_time_decimales, eax
	}

	PPEB ppeb = f();

	// end timestamp:
	int end_time_secondes;
	int end_time_decimales;
	__asm{
		rdtsc
		mov end_time_secondes, edx
		mov end_time_decimales, eax
	}
	int delay = end_time_secondes - start_time_secondes;
	printf("\ndelay: %d sec.\n", delay);
	if (delay > 1){ printf("Execution anormalement longue. Debugger probable.\n\n"); } else{ printf("RAS.\n\n"); }


	printf("PEB.BeingDebugged: %d\n", ppeb->BeingDebugged);

	char* p = (char *) ppeb; 
	printf("Direct access to PEB: %d\n", p[104] & 0x70); // plus discret
	if (p[104] != 0){ printf("=> debugged\n"); }


	char input[32];
	cout << "\nEnter your input : ";
	cin >> input;

	printf("Hash de l'input: %s\n", md5_hash((char*) input));

	if (strcmp(md5_hash((char*) input), "763ec1dc9466df8b964380678d258a8f") == 0){	// si les deux hashs sont égaux (le deuxième hash est celui d'une chaîne de 34 caractères pour troller)
		__asm{
			nop
			nop
		}
		printf("You found the really secret key!\n");

	} else{
		printf("Bad input...\n");
		cout << input << endl;
	
	}
	while(1);
	return 0;
}

