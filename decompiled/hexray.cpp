/* This file was generated by the Hex-Rays decompiler version 8.3.0.230608.
   Copyright (c) 2007-2021 Hex-Rays <info@hex-rays.com>

   Detected compiler: Visual C++
*/

#include <defs.h>

//-------------------------------------------------------------------------
// Function declarations

void sub_48BCB0();
// void __usercall start(int a1@<eax>, int a2@<edx>, int a3@<ecx>);

//-------------------------------------------------------------------------
// Data declarations

int dword_475000[512] =
    {
        -1876295541,
        1409368576,
        -1476230112,
        1342507328,
        -1609952639,
        1075061762,
        -2144843771,
        5279754,
        10559509,
        21119018,
        42238292,
        84476584,
        168953168,
        337945248,
        -1584009920,
        183094274,
        -1861684990,
        -26317201,
        -385874834,
        -1962700260,
        -410909541,
        -1610348030,
        -537088900,
        -381918657,
        170982627,
        -373511166,
        -1425819463,
        2121051804,
        -371437825,
        358795418,
        -617610348,
        -34826237,
        150396919,
        -531537304,
        -376683441,
        -1340928537,
        -2040665780,
        -136458258,
        142149810,
        39451891,
        205106367,
        -270161687,
        -807440909,
        -967159934,
        -535001979,
        655494019,
        -555886881,
        1867386038,
        77258468,
        1388743277,
        2087129991,
        1388301019,
        -376645860,
        453211235,
        -1132492386,
        -1277112940,
        1551482336,
        85376264,
        -611716871,
        -2046948128,
        -2031539010,
        -1588368381,
        -308364155,
        -1941049492,
        1841062940,
        1817123886,
        1981640060,
        -1997621749,
        1126564707,
        1298089185,
        -130435097,
        1215065197,
        493404275,
        -272708383,
        658946779,
        21813915,
        811525986,
        -1324838894,
        -1090793575,
        -1134154993,
        1144799240,
        168963180,
        -1126442749,
        2083211925,
        113600384,
        190399084,
        1536916530,
        -249763114,
        1201831871,
        -1241768227,
        -956327673,
        553849709,
        -1395769684,
        1843003000,
        -1843592433,
        -380849156,
        -1211436881,
        1731655723,
        707891269,
        917092740,
        -1225062304,
        -2070814970,
        -591947481,
        -1798110482,
        235458829,
        -1460683233,
        889401579,
        1135709764,
        1813912504,
        -1461534970,
        -1213441021,
        -711359094,
        -1362891311,
        651197013,
        1462440351,
        2097618085,
        378260379,
        236405328,
        53493944,
        -568452400,
        -2105625865,
        139782418,
        212924164,
        -261394498,
        1089689352,
        813355026,
        374905011,
        -417909293,
        477335933,
        -1167584236,
        -606224648,
        1820851685,
        -1143794906,
        478551620,
        1670446745,
        -1845002509,
        712855196,
        1807608779,
        1347574810,
        2085159680,
        740749046,
        -1361975615,
        2008284218,
        487495162,
        -1077975169,
        -1232084818,
        1667158427,
        1812742916,
        770301115,
        801879162,
        -980127883,
        -41107331,
        989056446,
        -2119480230,
        766269569,
        -1690557883,
        983371487,
        135347585,
        -1333587366,
        -145134077,
        691961081,
        -276372277,
        -947524939,
        -944914818,
        -295172795,
        1446024715,
        42565910,
        1410717687,
        -279492464,
        -1610408670,
        -1214916036,
        1907923835,
        -945936745,
        -1206743479,
        454528943,
        620336830,
        -1759914626,
        -671618190,
        34159422,
        1812202356,
        -1962785288,
        326284028,
        1870109421,
        -1954903955,
        767482716,
        235484474,
        1135967531,
        -62312420,
        -462836001,
        1639060283,
        -1955080605,
        907648619,
        166501994,
        470915005,
        1507748725,
        1483463659,
        1013764507,
        1168533622,
        -1334183963,
        -896634881,
        997164513,
        -579208068,
        -727952438,
        -619963168,
        -428224340,
        1924394961,
        -1285595770,
        -1180762988,
        1767630636,
        -1139179881,
        -1635496000,
        -601171238,
        -1445011697,
        1138507784,
        671726686,
        1015547462,
        1568417772,
        -1353440978,
        1995759725,
        1757536076,
        -964334564,
        1844540041,
        982030231,
        442693919,
        -982177657,
        -1429898769,
        -1040455252,
        -1006455898,
        1022585258,
        -396580680,
        -2144532420,
        -1695174731,
        1850858689,
        2117838750,
        -1174321998,
        2146425335,
        1152883337,
        2108699125,
        926972520,
        1818720074,
        -747860408,
        1258728418,
        1443130327,
        -1787553023,
        946357127,
        663228918,
        -638074547,
        807823130,
        -1673882231,
        -710552182,
        -253314325,
        -1973953448,
        160772512,
        1875898348,
        -1134053437,
        -312464581,
        -603069057,
        922318401,
        -1975665525,
        -465274183,
        -1238998828,
        987724336,
        129307349,
        341401678,
        130392684,
        830944975,
        525403349,
        -1786000760,
        1466058423,
        1388854726,
        -550960334,
        63815655,
        328505701,
        -1880548328,
        1987934778,
        -1689873739,
        1560581383,
        -1237318710,
        -1599496275,
        1473677253,
        -1400382165,
        339404338,
        1186523616,
        -804004837,
        -567690563,
        1768714270,
        -68181303,
        -262122219,
        1445414582,
        1655644368,
        -202964369,
        177792349,
        1549888942,
        -1572522007,
        1872717511,
        -65585789,
        -1155326829,
        1825036510,
        -838476427,
        1825845306,
        -1676444553,
        -1344521493,
        -2077809506,
        165710604,
        -1605380941,
        1201699003,
        2008522928,
        -1082543778,
        1664217757,
        -1407127697,
        -962275486,
        1924167725,
        -1816609014,
        -1068329003,
        1776392401,
        1821928952,
        802653310,
        -1638254950,
        1011812214,
        -1365939776,
        -303756372,
        -1460726900,
        -764989428,
        -1202188360,
        138848671,
        -983315437,
        91947175,
        834800703,
        -1214779663,
        -1846289267,
        -2146866596,
        -1107528676,
        1436401275,
        1758549804,
        -335078180,
        -1041926254,
        748861186,
        -2113547075,
        -833044448,
        -1713314091,
        -1309539604,
        1349292637,
        1712221657,
        -1123765663,
        2104059139,
        -1160247509,
        -1100442815,
        776302057,
        -1604448656,
        -889450544,
        1011070590,
        2127808416,
        108890971,
        1720545644,
        -300270643,
        -1704761409,
        -658718867,
        333232506,
        1040755763,
        387938672,
        -189926437,
        1483147500,
        -1852442403,
        1199597589,
        -1244921957,
        960587569,
        1746910751,
        121154666,
        1513228395,
        -260342522,
        1445909869,
        1313030960,
        -1923015379,
        -1813488230,
        1594089178,
        -540434491,
        722199510,
        -153438861,
        -1948158358,
        1204519835,
        62217384,
        -36167428,
        1510665618,
        25030524,
        499801166,
        -518422407,
        1141432539,
        995311373,
        -337303045,
        548582373,
        -948057212,
        1950452860,
        1934456568,
        178409303,
        -1141436623,
        355690535,
        -1107060830,
        -675826184,
        -1472791764,
        -1427699592,
        580196266,
        -2051846597,
        1303305835,
        310153481,
        1096331796,
        -2139850267,
        746412284,
        -113985530,
        325139126,
        -922222975,
        -742073749,
        -505872808,
        -2105870353,
        45364534,
        -159684641,
        -1025763303,
        -161738398,
        -644400496,
        1008385095,
        519905602,
        1597212476,
        1447274605,
        -1630786177,
        162782550,
        883932058,
        863808068,
        1292533849,
        -1329723197,
        2082346717,
        -1654459551,
        -222028636,
        255047569,
        -1922238300,
        -581031804,
        1325850464,
        -1098101545,
        -819252143,
        1776965760,
        786002011,
        1388367949,
        325465108,
        2054171275,
        1818720417,
        2078769826,
        246753668,
        812428132,
        -1105490808,
        1229625869,
        1499034687,
        -393551218,
        1203173535,
        1349260879,
        777720506,
        -1070357977,
        -1943810786,
        -1282771035,
        -237272159,
        -1991283643,
        -1868058588,
        -271332715,
        1752680702,
        877248604,
        906186642,
        137084035,
        1529909590,
        -169167178,
        -1073815806,
        -1134304405,
        -1656832214,
        1284377833,
        -56861054,
        -1027199774,
        -381149538,
        -1411546292,
        -1873809225,
        1829373725,
        1822629043,
        -61929856,
        1595608470,
        -340325268,
        1653326462,
        -1789278405,
        1045979820,
        -193817236,
        -1654212204,
        1539354218,
        627731049,
        453781390,
        1450902464,
        847617438,
        -1124243684,
        -970159262,
        -1650153773,
        1395948422,
        -1888754342,
        -527304369,
        -388574516,
        483610558,
        -899313778,
        896352079,
        -166889056,
        -1555259147,
        1394089164,
        -654526412,
        -1369492849,
        1062121997,
        -77562471,
        -924941290,
        619627117,
        1437910442,
        2087796366,
        -1965558596}; // weak

//----- (0048BCB0) --------------------------------------------------------
void sub_48BCB0()
{
    ;
}

//----- (0048E820) --------------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __usercall start(int a1 @<eax>, int a2 @<edx>, int a3 @<ecx>)
{
    int *v3;                                     // esi
    int *v4;                                     // edi
    unsigned int v5;                             // ebp
    char v6;                                     // al
    bool v7;                                     // cf
    int v8;                                      // ebx
    int v9;                                      // ebx
    int v10;                                     // ett
    int i;                                       // eax
    bool v12;                                    // cf
    int v13;                                     // ebx
    int v14;                                     // ebx
    int v15;                                     // ett
    unsigned int v16;                            // eax
    bool v17;                                    // zf
    int v18;                                     // ebx
    int v19;                                     // ett
    unsigned int v20;                            // eax
    bool v21;                                    // cf
    int v22;                                     // ebx
    int v23;                                     // ett
    bool v24;                                    // cf
    int v25;                                     // ebx
    int v26;                                     // ett
    int v27;                                     // ecx
    int v28;                                     // ecx
    unsigned int v29;                            // eax
    unsigned int v30;                            // eax
    int v31;                                     // eax
    bool v32;                                    // cf
    int v33;                                     // ebx
    int v34;                                     // ett
    bool v35;                                    // cf
    int v36;                                     // ebx
    int v37;                                     // ett
    bool v38;                                    // cf
    int v39;                                     // ebx
    int v40;                                     // ebx
    int v41;                                     // ett
    bool v42;                                    // zf
    int v43;                                     // ebx
    int v44;                                     // ett
    unsigned int v45;                            // ecx
    char *v46;                                   // edx
    char v47;                                    // al
    int v48;                                     // eax
    bool v49;                                    // cc
    int *v50;                                    // esi
    int *v51;                                    // edi
    int v52;                                     // ecx
    char v53;                                    // al
    unsigned __int8 v54;                         // al
    int v55;                                     // eax
    int v56;                                     // eax
    char v57;                                    // t0
    unsigned __int8 v58;                         // bl
    char *v59;                                   // edi
    int *v60;                                    // ebx
    int v61;                                     // ebp
    char v62;                                    // al
    char *v63;                                   // ecx
    unsigned __int8 v64;                         // al
    int v65;                                     // eax
    _WORD *v66;                                  // edi
    int *j;                                      // ebx
    int v68;                                     // eax
    int v69;                                     // eax
    int v70;                                     // eax
    char v71;                                    // tt
    void(__cdecl * v72)(int *, int, int, int *); // ebp
    int *v73;                                    // edi
    int v74[4];                                  // [esp+1Ch] [ebp-90h] BYREF
    int v75;                                     // [esp+2Ch] [ebp-80h] BYREF
    int v76;                                     // [esp+30h] [ebp-7Ch] BYREF
    char *v77;                                   // [esp+34h] [ebp-78h]
    int *v78;                                    // [esp+38h] [ebp-74h]
    int v79;                                     // [esp+3Ch] [ebp-70h]
    int v80;                                     // [esp+40h] [ebp-6Ch]
    int v81;                                     // [esp+44h] [ebp-68h]
    int v82;                                     // [esp+48h] [ebp-64h]
    int *v83;                                    // [esp+4Ch] [ebp-60h]
    int v84;                                     // [esp+50h] [ebp-5Ch]
    int v85;                                     // [esp+54h] [ebp-58h]
    int v86;                                     // [esp+58h] [ebp-54h]
    int v87;                                     // [esp+5Ch] [ebp-50h] BYREF

    v83 = &v87;
    v81 = a3;
    v80 = a2;
    v79 = a1;
    v3 = dword_475000;
    v4 = &dword_475000[-118784];
    v78 = &dword_475000[-118784];
    v5 = -1;
    while (1)
    {
        v9 = *v3;
        v7 = (unsigned int)v3++ < 0xFFFFFFFC;
        v10 = v7 + v9;
        v7 = __CFADD__(v7, v9) | __CFADD__(v9, v10);
        v8 = v9 + v10;
        do
        {
            if (v7)
            {
                v6 = *(_BYTE *)v3;
                v3 = (int *)((char *)v3 + 1);
                *(_BYTE *)v4 = v6;
                v4 = (int *)((char *)v4 + 1);
            }
            else
            {
                for (i = 1;; i = v20 + v21 + v20)
                {
                    v12 = __CFADD__(v8, v8);
                    v13 = 2 * v8;
                    if (!v13)
                    {
                        v14 = *v3;
                        v7 = (unsigned int)v3++ < 0xFFFFFFFC;
                        v15 = v7 + v14;
                        v12 = __CFADD__(v7, v14) | __CFADD__(v14, v15);
                        v13 = v14 + v15;
                    }
                    v16 = i + v12 + i;
                    v7 = __CFADD__(v13, v13);
                    v17 = 2 * v13 == 0;
                    v8 = 2 * v13;
                    if (v7)
                    {
                        if (!v17)
                            break;
                        v18 = *v3;
                        v7 = (unsigned int)v3++ < 0xFFFFFFFC;
                        v19 = v7 + v18;
                        v7 = __CFADD__(v7, v18) | __CFADD__(v18, v19);
                        v8 = v18 + v19;
                        if (v7)
                            break;
                    }
                    v20 = v16 - 1;
                    v21 = __CFADD__(v8, v8);
                    v8 *= 2;
                    if (!v8)
                    {
                        v22 = *v3;
                        v7 = (unsigned int)v3++ < 0xFFFFFFFC;
                        v23 = v7 + v22;
                        v21 = __CFADD__(v7, v22) | __CFADD__(v22, v23);
                        v8 = v22 + v23;
                    }
                }
                v28 = 0;
                v7 = v16 < 3;
                v29 = v16 - 3;
                if (v7)
                {
                    v32 = __CFADD__(v8, v8);
                    v8 *= 2;
                    if (!v8)
                    {
                        v33 = *v3;
                        v7 = (unsigned int)v3++ < 0xFFFFFFFC;
                        v34 = v7 + v33;
                        v32 = __CFADD__(v7, v33) | __CFADD__(v33, v34);
                        v8 = v33 + v34;
                    }
                }
                else
                {
                    v30 = v29 << 8;
                    LOBYTE(v30) = *(_BYTE *)v3;
                    v3 = (int *)((char *)v3 + 1);
                    v31 = ~v30;
                    if (!v31)
                    {
                        v50 = v78;
                        v51 = v78;
                        v52 = 3242;
                        while (1)
                        {
                            v53 = *(_BYTE *)v51;
                            v51 = (int *)((char *)v51 + 1);
                            v54 = v53 + 24;
                            while (v54 <= 1u && *(_BYTE *)v51 == 10)
                            {
                                v55 = *v51;
                                LOWORD(v55) = BYTE1(*v51);
                                v56 = __ROL4__(v55, 16);
                                v57 = v56;
                                LOBYTE(v56) = BYTE1(v56);
                                BYTE1(v56) = v57;
                                v58 = *((_BYTE *)v51 + 4) + 24;
                                *v51 = (int)v50 + v56 - (_DWORD)v51;
                                v51 = (int *)((char *)v51 + 5);
                                v54 = v58;
                                if (!--v52)
                                {
                                    v59 = (char *)(v50 + 142336);
                                LABEL_44:
                                    if (*(_DWORD *)v59)
                                    {
                                        v60 = (int *)((char *)v50 + *((_DWORD *)v59 + 1));
                                        v78 = (int *)((char *)v50 + *(_DWORD *)v59 + 582132);
                                        v59 += 8;
                                        v61 = ((int(__cdecl *)(int *, int, int, int, int, int *, int, int, int))v50[145543])(
                                            v78,
                                            v79,
                                            v80,
                                            v81,
                                            v82,
                                            v83,
                                            v84,
                                            v85,
                                            v86);
                                        while (1)
                                        {
                                            v62 = *v59++;
                                            if (!v62)
                                                goto LABEL_44;
                                            v63 = v59;
                                            v77 = v59;
                                            v64 = v62 - 1;
                                            do
                                            {
                                                if (!v63)
                                                    break;
                                                v17 = *v59++ == (char)v64;
                                                --v63;
                                            } while (!v17);
                                            v65 = ((int(__cdecl *)(int, char *))v50[145545])(v61, v77);
                                            if (!v65)
                                                break;
                                            *v60++ = v65;
                                        }
                                        ((void (*)(void))v50[145544])();
                                    }
                                    v66 = v59 + 4;
                                    for (j = v50 - 1;; *j = (int)v50 + v70)
                                    {
                                        v68 = *(unsigned __int8 *)v66;
                                        v66 = (_WORD *)((char *)v66 + 1);
                                        if (!v68)
                                            break;
                                        if ((unsigned __int8)v68 > 0xEFu)
                                        {
                                            LOBYTE(v68) = v68 & 0xF;
                                            v68 <<= 16;
                                            LOWORD(v68) = *v66++;
                                        }
                                        j = (int *)((char *)j + v68);
                                        v69 = *j;
                                        LOBYTE(v69) = BYTE1(*j);
                                        BYTE1(v69) = *j;
                                        v70 = __ROL4__(v69, 16);
                                        v71 = v70;
                                        LOBYTE(v70) = BYTE1(v70);
                                        BYTE1(v70) = v71;
                                    }
                                    v72 = (void(__cdecl *)(int *, int, int, int *))v50[145546];
                                    v73 = v50 - 1024;
                                    v75 = 0;
                                    v72(v50 - 1024, 4096, 4, &v75);
                                    *((_BYTE *)v73 + 519) &= ~0x80u;
                                    *((_BYTE *)v73 + 559) &= ~0x80u;
                                    v72(v50 - 1024, 4096, v74[0], v74);
                                    do
                                        v75 = 0;
                                    while (&v75 != &v76 - 32);
                                    JUMPOUT(0x425474);
                                }
                            }
                        }
                    }
                    v32 = v31 & 1;
                    v5 = v31 >> 1;
                }
                if (v32)
                    goto LABEL_15;
                v28 = 1;
                v35 = __CFADD__(v8, v8);
                v8 *= 2;
                if (!v8)
                {
                    v36 = *v3;
                    v7 = (unsigned int)v3++ < 0xFFFFFFFC;
                    v37 = v7 + v36;
                    v35 = __CFADD__(v7, v36) | __CFADD__(v36, v37);
                    v8 = v36 + v37;
                }
                if (v35)
                {
                LABEL_15:
                    v24 = __CFADD__(v8, v8);
                    v8 *= 2;
                    if (!v8)
                    {
                        v25 = *v3;
                        v7 = (unsigned int)v3++ < 0xFFFFFFFC;
                        v26 = v7 + v25;
                        v24 = __CFADD__(v7, v25) | __CFADD__(v25, v26);
                        v8 = v25 + v26;
                    }
                    v27 = v28 + v24 + v28;
                }
                else
                {
                    while (1)
                    {
                        v38 = __CFADD__(v8, v8);
                        v39 = 2 * v8;
                        if (!v39)
                        {
                            v40 = *v3;
                            v7 = (unsigned int)v3++ < 0xFFFFFFFC;
                            v41 = v7 + v40;
                            v38 = __CFADD__(v7, v40) | __CFADD__(v40, v41);
                            v39 = v40 + v41;
                        }
                        v28 += v38 + v28;
                        v7 = __CFADD__(v39, v39);
                        v42 = 2 * v39 == 0;
                        v8 = 2 * v39;
                        if (v7)
                        {
                            if (!v42)
                                break;
                            v43 = *v3;
                            v7 = (unsigned int)v3++ < 0xFFFFFFFC;
                            v44 = v7 + v43;
                            v7 = __CFADD__(v7, v43) | __CFADD__(v43, v44);
                            v8 = v43 + v44;
                            if (v7)
                                break;
                        }
                    }
                    v27 = v28 + 2;
                }
                v45 = (v5 < 0xFFFFFB00) + v27 + 2;
                v46 = (char *)v4 + v5;
                if (v5 <= 0xFFFFFFFC)
                {
                    do
                    {
                        v48 = *(_DWORD *)v46;
                        v46 += 4;
                        *v4++ = v48;
                        v49 = v45 <= 4;
                        v45 -= 4;
                    } while (!v49);
                    v4 = (int *)((char *)v4 + v45);
                }
                else
                {
                    do
                    {
                        v47 = *v46++;
                        *(_BYTE *)v4 = v47;
                        v4 = (int *)((char *)v4 + 1);
                        --v45;
                    } while (v45);
                }
            }
            v7 = __CFADD__(v8, v8);
            v8 *= 2;
        } while (v8);
    }
}
// 48E9FC: positive sp value 50 has been found
// 48E9FC: control flows out of bounds to 425474
// 475000: using guessed type int dword_475000[512];
// 48E820: using guessed type int anonymous_0[4];

// nfuncs=3 queued=2 decompiled=2 lumina nreq=0 worse=0 better=0
// ALL OK, 2 function(s) have been successfully decompiled
